#!/usr/bin/env python3
import argparse
import sys
import os
from shutil import copy2, move, rmtree
from datetime import datetime
import configparser

sys.stdout.reconfigure(line_buffering=True)

# system dependent settings #
#############################
SCR_DIR = os.path.dirname(__file__)
config = configparser.ConfigParser()
config.read(os.path.join(SCR_DIR,'config','config.txt'))
ORCA_4_EXE = config.get('executables folder', 'ORCA_4_EXE')
ORCA_5_EXE = config.get('executables folder', 'ORCA_5_EXE')
GAUSSIAN_09_EXE = config.get('executables folder', 'GAUSSIAN_09_EXE')
GAUSSIAN_16_EXE = config.get('executables folder', 'GAUSSIAN_16_EXE')
XTB_640_EXE = config.get('executables folder', 'XTB_640_EXE')
XTB_641_EXE = config.get('executables folder', 'XTB_641_EXE')
CREST_EXE = config.get('executables folder', 'CREST_EXE')
#############################
softwares = {
    'orca_4':{'NAME':'ORCA 4.0.1','EXECUTABLE':ORCA_4_EXE, 'INPUT_FORMAT':['inp'], 'OUTPUT_FORMAT':'out'},
    'orca_5':{'NAME':'ORCA 5.0.1','EXECUTABLE':ORCA_5_EXE, 'INPUT_FORMAT':['inp'], 'OUTPUT_FORMAT':'out'},
    'gaussian_09':{'NAME':'GAUSSIAN 09','EXECUTABLE':GAUSSIAN_09_EXE, 'INPUT_FORMAT':['gjf','com'], 'OUTPUT_FORMAT':'log'},
    'gaussian_16':{'NAME':'GAUSSIAN 16','EXECUTABLE':GAUSSIAN_16_EXE, 'INPUT_FORMAT':['gjf','com'], 'OUTPUT_FORMAT':'log'},
    'xtb_640':{'NAME':'XTB 6.4.0','EXECUTABLE':XTB_640_EXE, 'INPUT_FORMAT':['xyz'], 'OUTPUT_FORMAT':'out'},
    'xtb_641':{'NAME':'XTB 6.4.1','EXECUTABLE':XTB_641_EXE, 'INPUT_FORMAT':['xyz'], 'OUTPUT_FORMAT':'out'},
    'crest':{'NAME':'CREST','EXECUTABLE':CREST_EXE, 'INPUT_FORMAT':['xyz'], 'OUTPUT_FORMAT':'out'},
    'cregen':{'NAME':'CREST','EXECUTABLE':CREST_EXE, 'INPUT_FORMAT':['xyz'], 'OUTPUT_FORMAT':'out'}
}

#     arguments parsing     #
#############################
parser = argparse.ArgumentParser()
parser.add_argument('-s', '--software', type=str,choices=softwares.keys(), help='The software to submit the JOB', required=True)
parser.add_argument('-j', '--jobs', type=str, nargs='+', help='Input files suitable to selected SOFTWARE', required=True)
parser.add_argument('-f','--flags', type=str, help='Custom flags for XTB jobs')
parser.add_argument('--xtbf', help='Run XTB calculation in a subfolder', action='store_true')
args = parser.parse_args()

#        run methods        #
#############################
def run_orca(inputFile, flags):
    outputFile = f"{inputFile.split('.')[0]}.{softwares[args.software]['OUTPUT_FORMAT']}"
    runString = f"{softwares[args.software]['EXECUTABLE']} {inputFile} > {outputFile} 2>&1"
    os.system(runString)  

def run_gaussian(inputFile, flags):
    outputFile = f"{inputFile.split('.')[0]}.{softwares[args.software]['OUTPUT_FORMAT']}"
    runString = f"{softwares[args.software]['EXECUTABLE']} {inputFile} > {outputFile} 2>&1"
    clear_gaussian_scr()
    os.system(runString) 
    clear_gaussian_scr()
    

def run_xtb(inputFile, flags):
    MAIN_DIR = os.getcwd()
    outputFolder = inputFile.split('.')[0]
    outputFile = 'xtb.output'
    if flags:
        runString = f"{softwares[args.software]['EXECUTABLE']} {inputFile} {flags} > {outputFile} 2>&1"
    else:
        runString = f"{softwares[args.software]['EXECUTABLE']} {inputFile} > {outputFile} 2>&1"

    if args.xtbf:
        if os.path.isdir(outputFolder):
            if not os.path.isfile(inputFile):
                print()
                print( "*\tFATAL ERROR: Missing input\n*\tNOTHING DONE")
                print()
            else:
                rmtree(outputFolder)
                os.mkdir(outputFolder)
                copy2(inputFile,f"{outputFolder}/{inputFile}")
                os.chdir(outputFolder)
                os.system(runString)
        else:
            os.mkdir(outputFolder)
            copy2(inputFile,f"{outputFolder}/{inputFile}")
            os.chdir(outputFolder)
            os.system(runString)
    else:
        os.system(runString)
    os.chdir(MAIN_DIR)

def run_crest(inputFile, flags):
    MAIN_DIR = os.getcwd()
    outputFolder = inputFile.split('.')[0]
    outputFile = 'crest.output'
    if flags:
        runString = f"{softwares[args.software]['EXECUTABLE']} {inputFile} {flags} > {outputFile} 2>&1"
    else:
        runString = f"{softwares[args.software]['EXECUTABLE']} {inputFile} > {outputFile} 2>&1"

    if args.xtbf:
        if os.path.isdir(outputFolder):
            if not os.path.isfile(inputFile):
                print()
                print( "*\tFATAL ERROR: Missing input\n*\tNOTHING DONE")
                print()
            else:
                rmtree(outputFolder)
                os.mkdir(outputFolder)
                copy2(inputFile,f"{outputFolder}/{inputFile}")
                os.chdir(outputFolder)
                os.system(runString)
        else:
            os.mkdir(outputFolder)
            copy2(inputFile,f"{outputFolder}/{inputFile}")
            os.chdir(outputFolder)
            os.system(runString)
    else:
        os.system(runString)
    os.chdir(MAIN_DIR)

def run_cregen(inputFile, flags):
    MAIN_DIR = os.getcwd()
    outputFolder = inputFile.split('.')[0]
    outputFile = 'cregen.output'
    if flags:
        runString = f"{softwares[args.software]['EXECUTABLE']} --cregen {inputFile} {flags} > {outputFile} 2>&1"
    else:
        runString = f"{softwares[args.software]['EXECUTABLE']} --cregen {inputFile} > {outputFile} 2>&1"

    if args.xtbf:
        if os.path.isdir(outputFolder):
            if not os.path.isfile(inputFile):
                print()
                print( "*\tFATAL ERROR: Missing input\n*\tNOTHING DONE")
                print()
            else:
                rmtree(outputFolder)
                os.mkdir(outputFolder)
                copy2(inputFile,f"{outputFolder}/{inputFile}")
                os.chdir(outputFolder)
                os.system(runString)
        else:
            os.mkdir(outputFolder)
            copy2(inputFile,f"{outputFolder}/{inputFile}")
            os.chdir(outputFolder)
            os.system(f"obabel -f 1 -l 1 -ixyz {inputFile} -otmol >> coord")
            os.system(runString)
    else:
        os.system(f"obabel -f 1 -l 1 -ixyz {inputFile} -otmol >> coord")
        os.system(runString)
    os.chdir(MAIN_DIR)

def run_software(software, input, flags):
    switcher = {
        'orca_4':run_orca,
        'orca_5':run_orca,
        'gaussian_16':run_gaussian,
        'gaussian_09':run_gaussian,
        'xtb_640':run_xtb,
        'xtb_641':run_xtb,
        'crest':run_crest,
        'cregen':run_cregen
    }
    func = switcher.get(software, lambda:'Undefined Method')
    func(input, flags)

def clear_gaussian_scr():
    GAUSS_SCR_DIR = os.environ['GAUSS_SCRDIR']
    dir_content = next(os.scandir(GAUSS_SCR_DIR), None)
    if not dir_content == None:
       os.system('rm -r $GAUSS_SCRDIR/*')

# WAITING FOR PYTHON 3.10
# def run_software(software):
#     match software:
#         case 'orca_4':
#             run_orca()
#         case 'orca_5':
#             run_orca()
#         case 'gaussian_16':
#             run_gaussian()
#         case 'xtb_6.4.0':
#             run_xtb()
#         case 'xtb_6.4.1':
#             run_xtb()


#        general info       #
#############################
SOFTWARE_NAME = softwares[args.software]['NAME']
NUMBER_OF_JOBS = len(args.jobs)
SPACER = ' '*78
print()
print('#'*80)
print(f'#{SPACER}#')
print(f'\t\t\tRUNNING {SOFTWARE_NAME} QUEUE')
print(f'#{SPACER}#')
print('#'*80)
print()
print(f'STARTING AT:\t{datetime.now()}')
print(f'NUMBER OF JOBS:\t{NUMBER_OF_JOBS}')
print()
print('JOBLIST:')
for id,job in enumerate(args.jobs):
    print(f'\t({id+1}) {job}')
print()
print('#'*80)
print()

#      queue execution      #
#############################
for id,job in enumerate(args.jobs):
    print('*'*80)
    print(f'JOB NAME\t{job}')
    print(f'JOB NUMBER\t{id+1}')
    print()
    print(f'TOTAL JOBS:\t{NUMBER_OF_JOBS}')
    print(f'REMAINING JOBS:\t{NUMBER_OF_JOBS-id-1}')
    print('STATUS:\tRUNNING')
    run_software(args.software, job, args.flags)
    print('STATUS:\tDONE')
    print('*'*80)
    print()

print(f'DONE AT:\t{datetime.now()}')
print('*'*80)
print(f'\t\t\tFINISHED {SOFTWARE_NAME} QUEUE')
print(f'\t\t\tThanks for your patience')
print('*'*80)
print()